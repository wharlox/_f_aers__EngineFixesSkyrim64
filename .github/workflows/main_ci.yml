name: Main CI

on:
  push:
    # branches: [ master ]
    paths:
      - '.github/workflows/main_ci.yml'
      - 'cmake/sourcelist.cmake'
      - 'cmake/Version.h.in'
      - 'cmake/version.rc.in'
      - 'src/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'vcpkg.json'
  pull_request: {}
    # branches: [ master ]
  release:
    types: [ created ]
  workflow_dispatch:

env:
  BOOST_MINOR: '80' ## to match markusJx
  # BOOST_MINOR: '74'
  BUILD_TYPE: Release
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

jobs:
  build:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: "Set environmental variables"
        shell: bash
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
      - name: Setup vcpkg
        run: |
          mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd $env:VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.bat
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version.txt


      #- name: Install Boost
      #  uses: MarkusJx/install-boost@v2.4.5
      #  id: install-boost
      #  with:
      #    cache: true
      #    link: static
      #    boost_version: 1.80.0
      #    platform_version: 2022
      #    toolset: msvc
      #    # boost_install_dir: C:\somedir

      #- name: Set BOOST_ROOT
      #  run: |
      #    echo "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}" >> $GITHUB_ENV


      - name: Cache vcpkg
        uses: actions/cache@v4
        id: vcpkg-cache
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/vcpkg.json', 'vcpkg-version.txt') }}

      #- name: DEBUG where FindBoost.cmake
      #  shell: bash
      #  run: |
      #    env
      #    echo "\n\n\n\n"
      #    echo -e "find: ${{ github.workspace}}"
      #    pwd
      #    find  D:/ -type f -iname "*cmake" -printf '%P\n' 2>/dev/null
          # a/_f_aers__EngineFixesSkyrim64/_f_aers__EngineFixesSkyrim64/cmake/ports/autotoml/portfile.cmake
          # a/_f_aers__EngineFixesSkyrim64/_f_aers__EngineFixesSkyrim64/cmake/sourcelist.cmake
          # a/_f_aers__EngineFixesSkyrim64/_f_aers__EngineFixesSkyrim64/cmake/triplets/x64-windows-custom.cmake
          # a/_f_aers__EngineFixesSkyrim64/_f_aers__EngineFixesSkyrim64/cmake/version.cmake
          # a/_f_aers__EngineFixesSkyrim64/_f_aers__EngineFixesSkyrim64/external/CommonLibSSE/cmake/sourcelist.cmake

      - name: Configure CMake
        #run: cmake --preset vs2022-windows-vcpkg -DCOPY_BUILD=OFF -DCMAKE_MODULE_PATH=${{ env.BOOST_ROOT }}\lib\cmake\boost
        run: |
          # cmake --preset vs2022-windows-vcpkg -DCOPY_BUILD=OFF  -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include  -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}\lib  -DBoost_NO_WARN_NEW_VERSIONS=1
          cmake --preset vs2022-windows-vcpkg -DCOPY_BUILD=OFF
        #env:
        #  BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        #  BOOST_ROOT: ${{ env.BOOST_ROOT }}

      - name: Build
        run: |
          cmake --build build --config ${{ env.BUILD_TYPE }}
          cmake --build build --target archive --config ${{ env.BUILD_TYPE }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: ${{ github.workspace }}/build/archive/*.zip

      - name: Publish release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ github.workspace }}/build/archive/*.zip
